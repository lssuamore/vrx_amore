// Generated by gencpp from file amore/ned_buoy.msg
// DO NOT EDIT!


#ifndef AMORE_MESSAGE_NED_BUOY_H
#define AMORE_MESSAGE_NED_BUOY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <std_msgs/String.h>

namespace amore
{
template <class ContainerAllocator>
struct ned_buoy_
{
  typedef ned_buoy_<ContainerAllocator> Type;

  ned_buoy_()
    : position()
    , id()  {
    }
  ned_buoy_(const ContainerAllocator& _alloc)
    : position(_alloc)
    , id(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef  ::std_msgs::String_<ContainerAllocator>  _id_type;
  _id_type id;





  typedef boost::shared_ptr< ::amore::ned_buoy_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::amore::ned_buoy_<ContainerAllocator> const> ConstPtr;

}; // struct ned_buoy_

typedef ::amore::ned_buoy_<std::allocator<void> > ned_buoy;

typedef boost::shared_ptr< ::amore::ned_buoy > ned_buoyPtr;
typedef boost::shared_ptr< ::amore::ned_buoy const> ned_buoyConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::amore::ned_buoy_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::amore::ned_buoy_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::amore::ned_buoy_<ContainerAllocator1> & lhs, const ::amore::ned_buoy_<ContainerAllocator2> & rhs)
{
  return lhs.position == rhs.position &&
    lhs.id == rhs.id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::amore::ned_buoy_<ContainerAllocator1> & lhs, const ::amore::ned_buoy_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace amore

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::amore::ned_buoy_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::amore::ned_buoy_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::amore::ned_buoy_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::amore::ned_buoy_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::amore::ned_buoy_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::amore::ned_buoy_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::amore::ned_buoy_<ContainerAllocator> >
{
  static const char* value()
  {
    return "790dcb77cf1dd99c8074cf037e8fb43c";
  }

  static const char* value(const ::amore::ned_buoy_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x790dcb77cf1dd99cULL;
  static const uint64_t static_value2 = 0x8074cf037e8fb43cULL;
};

template<class ContainerAllocator>
struct DataType< ::amore::ned_buoy_<ContainerAllocator> >
{
  static const char* value()
  {
    return "amore/ned_buoy";
  }

  static const char* value(const ::amore::ned_buoy_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::amore::ned_buoy_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point position\n"
"std_msgs/String id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/String\n"
"string data\n"
;
  }

  static const char* value(const ::amore::ned_buoy_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::amore::ned_buoy_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.position);
      stream.next(m.id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ned_buoy_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::amore::ned_buoy_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::amore::ned_buoy_<ContainerAllocator>& v)
  {
    s << indent << "position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "id: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AMORE_MESSAGE_NED_BUOY_H
